{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelServices.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.jsx","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","alt","src","img","style","display","widows","height","objectFit","margin","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComics","comics","title","description","pageCount","thumbnail","path","extension","language","textObjects","price","prices","char","name","homepage","urls","wiki","items","View","isNotAvailable","className","href","RandomChar","setChar","useEffect","updateChar","onCharLoaded","length","substring","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","CSSTransition","timeout","classNames","onCharSelected","tabIndex","ref","el","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","CharInfo","charId","console","log","skeleton","ErrorBoundary","state","errorInfo","this","setState","children","Component","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/5.38d757fb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\n\nconst ErrorMessage = () => {\n    return (\n        <img alt = \"error\" src={img} style={{display: 'block', widows: 250, height: 250, objectFit: 'contain', margin: '0 auto'}}/>\n    )\n}\n\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\n\nconst  useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp(); \n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=c3ecd3f2735edf45815f66d2ac4a27e4';\n    const _baseOffset = 210;\n    // getResourse = async (url) => {\n    //     let res = await fetch(url);\n\n    //     if(!res.ok) {\n    //         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\n    //     }\n\n    //     return await res.json();\n    // }\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);;\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComics = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects.language || 'en-us',\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\n        }\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description || 'No description',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage:  char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComics}\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async(url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n        setLoading(true);\n\n        try{\n            const response = await fetch(url, {method, body, headers});\n            if(!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n            const data = await response.json();\n\n            setLoading(false);\n            return data;\n            \n        }catch(e){\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, [])\n\n    const clearError = useCallback(() => setError(null), [])\n    return {loading, request, error, clearError}\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelServices';\nimport Spinner from '../spinner/Spinner';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst  RandomChar = () => {\n    const [char, setChar] = useState({});\n    const {loading, error, getCharacter, clearError} =  useMarvelService();\n\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    const onCharLoaded = (char) => {\n        if(char.description.length > 140) {\n            char.description = char.description.substring(0, 138) + '...';\n        }\n        setChar(char);\n       \n    }\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\n        getCharacter(id)\n        .then(onCharLoaded)\n    }\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage} {spinner} {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let isNotAvailable = null;\n    if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        isNotAvailable = true;\n    }\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={isNotAvailable ? {objectFit: 'contain'} : null}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport './charList.scss';\nimport useMarvelService from '../../services/MarvelServices';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n// import { toHaveStyle } from '@testing-library/jest-dom/dist/matchers';\n\nconst  CharList = (props) => {\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    const {loading, error, getAllCharacters} = useMarvelService()\n\n    useEffect(() => {\n        onRequest(offset, true)\n    }, [])\n    const onRequest = (offset, initial) => {\n        initial ? setItemLoading(false) : setItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true\n        }\n\n        setCharList(charList => [...charList, ...newCharList])\n        setItemLoading(() => false)\n        setOffset(offset => offset + 9)\n        setCharEnded(charEnded => ended)\n\n        \n    }\n\n  \n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n\n        const items = arr.map((item, i) => {\n            let isNotAvailable = null;\n            if(item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                isNotAvailable = true;\n            }\n            \n            return (\n                <CSSTransition timeout={500} classNames={'char__item'}\n                key={item.id}>\n                    <li className=\"char__item\"\n                    onClick={() => {props.onCharSelected(item.id);  focusOnItem(i);}} \n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el} onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={isNotAvailable ? {objectFit: 'contain'} : null}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n                </CSSTransition>\n            )\n        });\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n    return (\n        <div className=\"char__list\">\n                {errorMessage} {spinner} {items}\n            <button className=\"button button__main button__long\" disabled={newItemLoading} onClick={() => onRequest(offset)} style={{'display': charEnded ? 'none' : 'block'}}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton'\nimport useMarvelService from '../../services/MarvelServices';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return\n        }\n        clearError();\n        getCharacter(charId)\n        .then(onCharLoaded)\n        \n    }\n\n    useEffect(() => {\n            updateChar();\n            console.log(props)\n    }, [props.charId])\n\n    const onCharLoaded = (char) => {\n        if(char.description.length > 140) {\n            char.description = char.description.substring(0, 138) + '...';\n        }\n        setChar(char)\n    }\n\n        const skeleton = char || loading || error ? null : <Skeleton/>\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n        return (\n            <div className=\"char__info\">\n                {skeleton}{errorMessage}{spinner}{content}\n            </div>\n        )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    let items;\n    let isNotAvailable = null;\n            if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                isNotAvailable = true;\n            }\n    if(comics.length === 0) {\n        items = (\n                <li className=\"char__comics-item\" key={0}>\n                     There is no comics with this characters\n                </li>\n        )\n    } else {\n        items = comics.map((item, i) => {\n            if(i >= 10) {\n                return;\n            } \n            return (\n                <li className=\"char__comics-item\" key={i}>\n                     {item.name}\n                </li>\n            )\n        })\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={isNotAvailable ? {objectFit: 'contain'} : null}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                 {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {\n                    items\n                }\n                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react/cjs/react.production.min\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;  \n    }\n}\n\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\n\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n    const [selectedChar, setChar] = useState(null)\n    // state = {\n    //     selectedChar: null\n    // }\n\n    const onCharSelected = (id) => {\n        setChar(id);\n        // this.setState({\n        //     selectedChar: id\n        // })\n    }\n    return (\n        <>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <ErrorBoundary>\n                    <CharInfo charId={selectedChar}/>\n                </ErrorBoundary>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage"],"sourceRoot":""}